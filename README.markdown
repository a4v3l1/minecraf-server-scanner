# Minecraft Server Scanner

Minecraft Server Scanner — это приложение для поиска и анализа Minecraft-серверов. Оно предоставляет как графический интерфейс (GUI) для удобного взаимодействия, так и консольную версию для быстрого сканирования.

## Возможности

- **Графический интерфейс** (`gui.py`):
  - Сканирование серверов по заданному IP и диапазону портов.
  - Фильтрация по количеству игроков, ядру сервера, версии и MOTD.
  - Добавление серверов в избранное с тегами.
  - Автоматическая перепроверка избранных серверов.
  - Сохранение результатов в JSON-файл.
  - Поддержка светлой и темной темы.
- **Консольная версия** (`scanner.py`):
  - Быстрое сканирование серверов с выводом результатов в консоль.
  - Интерактивный ввод IP и портов.
  - Сохранение результатов в `results.json`.
- Поддержка обнаружения ядра сервера (Vanilla, Paper, Spigot, Forge, Fabric), модов, плагинов и favicon.

## Установка и запуск

### Для Windows
1. **Скачайте исполняемый файл**:
   - Перейдите в раздел [Releases](https://github.com/a4v3l1/minecraf-server-scanner/releases/tag/beta) и скачайте ` full_mcsa_ver01.zip `.
2. **Запустите приложение**:
   - Запустите `gui.exe`.
   - Убедитесь, что у вас есть права на запись в эту папку (для создания `scanner.log`, `favorites.json`, `config.json`, `history.db`).
3. **Консольная версия**:
   - Если хотите использовать консольную версию, следуйте инструкциям для Linux/macOS, или же используйте исполняемый файл для `scanner.py`, который назван как light.

### Для Linux/macOS
1. **Установите Python**:
   - Убедитесь, что у вас установлен Python 3.8+.
     ```bash
     python3 --version
     ```
   - Для Linux установите `tkinter`:
     ```bash
     sudo apt-get install python3-tk  # Ubuntu/Debian
     sudo dnf install python3-tkinter  # Fedora
     ```
   - Для macOS установите `tkinter` (если требуется):
     ```bash
     brew install python-tk
     ```

2. **Клонируйте репозиторий**:
   ```bash
   git clone https://github.com/a4v3l1/minecraf-server-scanner.git
   cd minecraf-server-scanner
   ```

3. **Установите зависимости**:
   ```bash
   pip install -r requirements.txt
   ```

4. **Запустите GUI-версию**:
   ```bash
   python3 gui.py
   ```

5. **Запустите консольную версию**:
   ```bash
   python3 scanner.py
   ```
   - Следуйте подсказкам в консоли для ввода IP и портов (или нажмите Enter для значений по умолчанию: IP `147.185.221.31`, порты `36000–50000`).

### Зависимости
Зависимости указаны в `requirements.txt`:
```
pillow
mcstatus
rich
```

## Компиляция в исполняемый файл
Для пользователей Linux/macOS, желающих скомпилировать `gui.py` или `scanner.py` в исполняемый файл:
1. Установите PyInstaller:
   ```bash
   pip install pyinstaller
   ```
2. Скомпилируйте GUI-версию:
   ```bash
   pyinstaller --noconfirm --windowed \
     --add-data "scanner_async.py:." \
     --add-data "default_icon.png:." \
     --hidden-import=mcstatus \
     --hidden-import=PIL \
     gui.py
   ```
3. Скомпилируйте консольную версию:
   ```bash
   pyinstaller --noconfirm --onefile scanner.py
   ```
4. Найдите исполняемые файлы в папке `dist/`.

## Использование
- **GUI-версия**:
  - Введите IP и диапазон портов (например, `25565-25600`).
  - Нажмите «Сканировать» для поиска серверов.
  - Используйте фильтры (по игрокам, ядру, версии, MOTD) и сортировку.
  - Добавляйте серверы в избранное, копируйте IP, добавляйте теги.
  - Включайте автопроверку для периодического обновления избранных серверов.
- **Консольная версия**:
  - Введите IP и диапазон портов при запросе (или нажмите Enter для значений по умолчанию).
  - Результаты выводятся в консоль и сохраняются в `results.json`.

## Примечания
- **Windows**: Исполняемые файл `gui.exe` доступен в релизе.
- **Логи**: Логи приложения сохраняются в `scanner.log`.
- **Данные**: Файлы `favorites.json` создаются автоматически.
- **Ошибки favicon**: Если возникают проблемы с favicon, проверьте логи и обновите `mcstatus`:
  ```bash
  pip install --upgrade mcstatus
  ```